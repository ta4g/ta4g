# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1


workflows:
  version: 2
  build:
    jobs:
      - proto
      - build:
          requires:
            - proto


jobs:
  proto:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    working_directory: ~/repo
    steps:
      - checkout

      - create_concatenated_proto_lock:
          lockname: proto.lock
      - run: ls -lh proto.lock && wc -l proto.lock
      - uncache_directory:
          lockname: proto.lock
          folder: gen

      - run:
          name: Generate protos
          command: |
            make proto
            ls -lhR gen

      - cache_directory:
          lockname: proto.lock
          folder: gen

      - persist_to_workspace:
          root: .
          paths:
            - gen


  build:
    working_directory: ~/repo
    docker:
      - image: cimg/go:1.16.5
    steps:
      - checkout

      - attach_workspace:
          at: .
      - run: ls -lhR gen

      - run:
          name: Install Dependencies
          command: go mod download

      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-reports
            gotestsum --junitfile /tmp/test-reports/unit-tests.xml
      - store_test_results:
          path: /tmp/test-reports


commands:
  create_concatenated_proto_lock:
    description: "Concatenate all proto files into single file. This file is used as checksum source for part of caching key."
    parameters:
      lockname:
        type: string
    steps:
      - run:
          name: Combine proto files to single file
          command: find proto -name '*.proto' | sort | xargs cat > << parameters.lockname >>

  cache_directory:
    description: "Cache a given directory."
    parameters:
      lockname:
        type: string
      folder:
        type: string
    steps:
      - run:
          name: Make a cache folder
          command: mkdir ~/cache/$(md5sum << parameters.lockname >> | tr -d '\n')
      - run:
          name: Tar the folder
          command: |
            tar -zcvf cache.tar.gz  << parameters.folder >>
            mv cache.tar.gz ~/cache/$(md5sum << parameters.lockname >> | tr -d '\n')
      - save_cache:
          key: cache-dir-v4-{{ checksum "<< parameters.lockname >>" }}
          paths:
            - ~/cache

  uncache_directory:
    description: "Cache a given directory."
    parameters:
      lockname:
        type: string
      folder:
        type: string
    steps:
      - run:
          name: Make a cache folder
          command: mkdir ~/cache
      - restore_cache:
          keys:
            - cache-dir-v4-{{ checksum "<< parameters.lockname >>" }}
      - run:
          name: UnTar the folder
          command: |
            ls ~/cache/$(md5sum << parameters.lockname >> | tr -d '\n') || exit 0
            mv ~/cache/$(md5sum << parameters.lockname >> | tr -d '\n')/cache.tar.gz .
            tar -xvzf cache.tar.gz
